package main

import (
	"log"
	"net/http"
	"os"
	"path/filepath" // For creating file paths

	"task-tracker-demo/backend/database"
	"task-tracker-demo/backend/handlers"
	_ "task-tracker-demo/backend/models" // Imported for models initialization

	"github.com/gorilla/mux"
	"github.com/joho/godotenv"
)

// The path to your actual frontend public directory, which contains the built React files.
const frontendDir = "apnacard/public"


func main() {
	// 1. Load the .env file
	if err := godotenv.Load(); err != nil {
		log.Println("Warning: Could not find .env file. Using system environment/hardcoded defaults.")
	}
	
	// 2. Get the server port from the environment file
	port := os.Getenv("BACKEND_PORT")
	if port == "" {
		port = "8080" // Default port
	}
	backendPort := ":" + port

	// 3. Connect to the MongoDB database (Attempt connection)
	database.ConnectDB()

	// 4. Setup Router
	router := mux.NewRouter()

	// --- 4a. API Routes (Backend Logic - MUST come before file serving) ---
	api := router.PathPrefix("/api").Subrouter()
	api.HandleFunc("/register", handlers.RegisterUser).Methods("POST", "OPTIONS")
	api.HandleFunc("/tasks", handlers.PostTask).Methods("POST", "OPTIONS")
	
	// --- 4b. SERVE FRONTEND STATIC FILES (React UI) ---
	// Define the absolute path to the frontend files: .. (up one dir) / apnacard / public
    frontendPath := filepath.Join("..", frontendDir) 
    
    // Create a file server handler pointing to the public directory
    fs := http.FileServer(http.Dir(frontendPath))

    // 1. Handle /static/ path: This serves all JS/CSS files generated by the React build
    // We strip the prefix to ensure the file server looks for the file correctly within the directory.
    // NOTE: We assume the build output uses paths like /static/js/main.js
    router.PathPrefix("/static/").Handler(http.StripPrefix("/static/", http.FileServer(http.Dir(filepath.Join(frontendPath, "static")))))

    // 2. Handle root assets directly (favicon, manifest, etc.)
    router.PathPrefix("/favicon.ico").Handler(fs)
    router.PathPrefix("/logo192.png").Handler(fs)
    router.PathPrefix("/manifest.json").Handler(fs)


	// 3. Serve the main index.html file for the root path and all other routes
    // This allows React Router to take over for client-side routing.
	router.PathPrefix("/").HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
        // Serve index.html for all requests that haven't matched an API route or static asset.
        http.ServeFile(w, r, filepath.Join(frontendPath, "index.html"))
	})


	// 5. Start the Server
	log.Printf("Starting Integrated server on http://localhost%s (Serving UI and API)", backendPort)
	log.Fatal(http.ListenAndServe(backendPort, router))
}